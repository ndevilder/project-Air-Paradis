name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Récupération du code
    - name: Checkout code
      uses: actions/checkout@v3

    # Étape 2 : Installer Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    # Étape 3 : Installer les dépendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    # Étape 3 : Exécuter les tests unitaires avec Pytest
    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml
      continue-on-error: false  # Stoppe le déploiement si les tests échouent

    # Étape 4 : Installer le client SSH
    - name: Install SSH Client
      run: sudo apt-get install -y openssh-client

    # Étape 5 : Créer le fichier de clé SSH
    - name: Create SSH key file
      run: |
        echo "${{ secrets.EC2_KEY }}" > ndevilder-airParadis.pem
        chmod 600 ndevilder-airParadis.pem

    # Étape 6 : Ajouter EC2 à known_hosts
    - name: Add EC2 to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Étape 7 : Vérifier la connexion SSH
    - name: Test SSH Connection
      run: |
        ssh -i ndevilder-airParadis.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

    # Étape 8 : Créer le répertoire de l'application sur EC2
    - name: Create App Directory on EC2
      run: |
        ssh -i ndevilder-airParadis.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/${{ secrets.EC2_USER }}/app"

    # Étape 9 : Transférer les fichiers vers EC2
    - name: Transfer Files to EC2
      run: |
        scp -i ndevilder-airParadis.pem -r ./* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app

    # Étape 10 : Déployer l'application sur EC2
    - name: Deploy Application on EC2
      run: |
        ssh -i ndevilder-airParadis.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          sudo docker stop fastapi-app || true
          sudo docker rm fastapi-app || true
          cd /home/${{ secrets.EC2_USER }}/app || exit 1
          sudo docker build -t fastapi-app .
          sudo docker run -d --name fastapi-app -p 80:80 fastapi-app
        EOF

name: Deploy FastAPI to AWS EC2 with Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Récupérer le code source
    - name: Checkout code
      uses: actions/checkout@v3

    # Étape 2 : Lister les fichiers pour vérification
    - name: List project files
      run: ls -R

    # Étape 3 : Construire l'image Docker
    - name: Build Docker image
      run: docker build -t fastapi-app .

    # Étape 4 : Exécuter les tests dans le conteneur Docker
    - name: Run tests in Docker
      run: |
        docker run --rm fastapi-app pytest --cov=. --cov-report=xml --disable-warnings
      # Si les tests échouent, GitHub Actions arrêtera automatiquement le workflow.

    # Étape 5 : Se connecter à Docker Hub
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Étape 6 : Pousser l'image sur Docker Hub
    - name: Push Docker image to Docker Hub
      run: docker tag fastapi-app dralakh/airparadis:latest && docker push dralakh/airparadis:latest

    # Étape 7 : Déployer sur EC2
    - name: Deploy to AWS EC2
      run: |
        ssh -i "${{ secrets.EC2_KEY }}" -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Arrêter et supprimer le conteneur existant
          sudo docker stop fastapi-app || true
          sudo docker rm fastapi-app || true
          
          # Récupérer la nouvelle image depuis Docker Hub
          sudo docker pull dralakh/airparadis:latest
          
          # Démarrer un nouveau conteneur
          sudo docker run -d --name fastapi-app -p 80:80 dralakh/airparadis:latest
          
          # Vérification : lister les conteneurs en cours d'exécution
          sudo docker ps
        EOF

    # Étape 8 : Vérifier le déploiement
    - name: Test deployment
      run: |
        ssh -i "${{ secrets.EC2_KEY }}" -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} curl -f http://127.0.0.1:80 || (echo "Deployment failed." && exit 1)
